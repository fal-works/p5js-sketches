/**
 * Recursive Tree.
 * Source code in TypeScript: https://github.com/fal-works/p5js-sketches/tree/master/recursive-tree
 *
 * @copyright 2020 FAL
 * @version 0.1.0
 */
!function(e){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}let n,l;const t=e=>{n=document.getElementById("RecursiveTree")||document.body,l=e},a=(e,i=0)=>{const n=l.createDiv();n.style("background-color: "+("#"+l.random(["ffcfdf","fefdca","e0f9b5","a5dee5"]))),n.addClass("line"),n.addClass("new-line"),n.addClass("item");const t=l.createDiv();t.style("margin-left: 64px"),t.addClass("item"),e&&(e.mainDiv.child(n),e.mainDiv.child(t));const a={mainDiv:n,level:i,children:[],childrenDiv:t,phase:0};return setTimeout((()=>{n.removeClass("new-line"),n.addClass("alive-line"),a.phase=1,setTimeout((()=>{a.phase=2}),1e3)}),1),a},d=e=>{e.phase=3,e.mainDiv.removeClass("alive-line"),e.mainDiv.addClass("dead-line"),setTimeout((()=>{e.mainDiv.remove(),e.childrenDiv.remove()}),1e3);for(const i of e.children)d(i)},s=e=>{if(e.children.length<2&&Math.random()<.03)(e=>{const i=a(e,e.level+1);e.children.push(i),e.childrenDiv.child(i.mainDiv),e.childrenDiv.child(i.childrenDiv)})(e);else if(1<e.children.length&&Math.random()<.005){const i=(e=>{const{children:i}=e;if(0===i.length)return;const n=Math.floor(Math.random()*i.length),l=i.splice(n,1)[0];return 3===l.phase?void 0:l})(e);i&&d(i)}else if(e.level<2)for(const i of e.children)s(i)};let c;const r=()=>{l.noCanvas();const e=l.createDiv();e.style("margin: 10px"),n&&n.appendChild(e.elt),c=a();const i=c;e.child(i.mainDiv),e.child(i.childrenDiv)},o=()=>{s(c)};new(i(e).default)((e=>{t(e),e.setup=r,e.draw=o}),n)}(p5);